Introduction
Welcome
1m 6s

Using the exercise files
1m 34s

What you need to know before watching this course
1m 29s

Getting the right tools for theme creation
2m 50s


=====================================================================================================
=====================================================================================================
1. Creating a Child Theme from Scratch
=====================================================================================================
=====================================================================================================
17m 2s

What is a WordPress child theme and when should you use it?
2m 38s
So by splitting your modifications into a child theme, you protect your own modifications while using the original 
theme and getting all the upgrades. It's a simple choice; if you want to use a theme and you want to make any change, 
even if it's a really small one, always use a child theme. Now let's get started.

Picking a parent theme
3m 55s
Free vs Premium Pay themes discussed.
However, there's a caveat to that. In premium themes you'll often find proprietary code, meaning instead of using core WordPress 
functionality, the developer may have created new functionality specifically for that theme or for that foundry, so that those 
functions only work as long as you use their themes, and if you ever move away from their themes, you'll lose some of your content. 
Free themes are generally sparse on features, meaning you get core functionality from WordPress and not much else.

Free themes in general cannot be expected to be future proof, meaning you can't expect them to be updated and you can't expect them 
to start including new features that come out with WordPress, at least not immediately. That is unless you install a theme that comes 
directly from WordPress itself.

So one of the default themes for instance will always be up-to-date and will always have all the new features built in. 
On the other hand, premium themes may have extra caveats that you're not aware of. For example, I've seen theme foundries 
that actually charge you extra if you want to make a child theme based on one of their premium themes. So that's something 
you have to look up before you buy a theme from a premium theme foundry. Although there are thousands of free and premium 
WordPress themes out there to choose from, chances are you're actually better off just using one of the default themes that 
comes with WordPress when you're creating a child theme.

The reason for that is the default themes have all the latest features, they're all built properly, they're future proof, 
and they're always easy to work with, because they have great documentation. In this course, we'll be working with the Twenty 
Twelve theme, which was released in the fall of 2012. This theme is simple to use, it has all the core features we need, and 
it's written in such a way that it's easy to understand and easy to build child themes from. 



Making sure you have the Twenty Twelve parent theme
1m 50s

Creating and activating a basic child theme
4m 20s
In the content themes folder create a subfolder  eg childoftwentytwelve
Now create a file style.css from notepad++ and save as cascading stylesheet

Now all we need it put something like this in it
/*
Theme Name: Child of Twenty Twelve
Theme URI: ????
Description: Cool child theme based on Twenty Twelve
Author: Rick MacLean
Version: 0.0.1 
Template: twentytwelve
*/

Now you'll also notice this looks terrible and that's because my child theme currently has no stylesheet, so what you're seeing is only the 
content on the page with no style. That's the next step to add style back into the child theme.

Then goto Themes and we see that theme available as a child theme which I can activate. 


Importing parent theme styles
4m 19s
When you make a child theme, you start off with a theme that displays all the content without any style. That's because your child theme 
stylesheet is currently empty. If you're going to build a new layout with completely custom styles this is great because you can start 
from scratch, but in most cases, you want to import the existing styles from the parent theme and then work based on those styles. 

There are two ways of doing this (I'll show you my recommendation.)

The two methods are overwriting versus overriding, and though they sound almost the same, they're very different when you actually do them.

overwriting: you copy out all the code from the stylesheet, and you paste all that code into your child theme stylesheet. That way you have 
     full micromanaging control over every little piece of style code in your theme, and you never have a situation where one piece of 
	 code overrides another piece of code.
	 
	 It means that you can ignore anything that's happening in the parent theme, and you can write your own style code, and everything will be 
	 fine. That means no surprises, but it also means that if an update comes out for the parent theme, and that update includes new content, 
	 that new content will not be styled and you'll have to write styles for it. 
	 
overriding: you simply reference the parent styles, and then you just add the styles you want to change in your child theme styles.css file.
     This means you have control over everything you want to control, and you leave everything else to the parent theme. It also means that any 
	 future styles that are included in an update will also be included in your child theme, and it means that in very rare cases some of those 
	 future styles may mess with what you've already created. But the most important thing about overriding is that you will always get all the 
	 updates and it's a lot less work. So I recommend, unless you're changing everything, you should always use the overriding method.
	 
open style.css
  @import url('../twentytwelve/stle.css')	

Understanding this technique of importing the styles from the parent stylesheet into the child theme stylesheet without actually copying it, 
and then overriding those existing styles is very important when you work with the child themes, because then you only have to focus on changing 
the things that you want to change on the website and you can leave everything else alone.
  

  
=====================================================================================================
=====================================================================================================
2. Modifying and Adding Styles
=====================================================================================================
=====================================================================================================
16m 2s

Using the developer tools
3m 53s
When you work with child themes, or any other theme for that matter, one of the first things people want to do when they install a WordPress 
site and start working with the theme is make changes to the stylesheet, and this is where an important tool in this browser comes in.

Most modern browsers have web developer tools built-in to make it easy for you to connect to HTML and the CSS together, and 
also experiment with it.

In Chrome, the web developer tools can be accessed in several different ways. You can go up to the menu here on the far right corner, and 
select Tools > Developer tools. 

You can also just hit 
Ctrl+Shift+I 
in your browser, this will also open the web developer tools, 

or if you want to target a specific element,  all I have to do is 
right-click on it, 
select Inspect element and the web developer tools will open directly to that element. 

The web developer tools are actually advanced applications that let you interact with the live code on the web and make changes to it and 
experiment with it to find out how it works.

So basically the browser and the web developer tools gives me an environment where I can experiment with my code and figure out how 
things fit together and how they work, and then once I have a code I want and it looks the way I want it to, I can copy it out and 
save it and make it permanent.






Modifying existing styles
4m 24s
CSS or cascading style sheets work on the simple principle of a cascade. The first styles that are listed have less importance than the last 
ones, meaning the ones that are the furthest down in the stylesheet matter the most. 

*****
eg we will change the image round corners
goto developer tools 
select an image 
see styles on right box 
experiment to find the right thing 
copy the style and paste in my childTheme
and make the changes I want


Adding space between paragraphs
4m 7s
you should do is change the margins around each paragraph to change the height. So if I want to change the space 
underneath each of the paragraphs what I need to do is make a small change to the style that affects the paragraphs. 





Changing font family styles
3m 38s
One of the many factors that play into putting forward a consistent presence on the web is the use of fonts. In the past, 
web fonts were fairly restricted. But today thanks to modern browser technology, you have far greater options where fonts 
are concerned. The Twenty Twelve theme ships with a custom font hosted by Google Web fonts. Later in the course, we will look 
at how you can swap out this Google font for different Google web font, but for now, let's take a look at how you can change the 
style sheet in your child theme to use a standard font instead of the one that ships.

inspect element
computed style???? computed
see this 
  font-family: 'Open Sans', Helvetica, Arial, sans-serif;   note Open Sans and has the fallbacks if the first was not there.

To find the original style that kicks in here, instead of using the technique I showed you earlier, I'm simply going to go into 
the Computed Styles and click on this link that points to the original style in the style-sheet. see by opening font-family
You see body.custom-font-enabled and then you have the font family: Open Sans, Helvetica, Arial, Sans Serif. Directly 
above it, you'll notice that the body style also has a font family defined.

see this
body.custom-font-enabled {
	font-family: "Open Sans", Helvetica, Arial, sans-serif;
}
So I'll copy that's style out, go in to my child theme, and because this is a body style it should be high up in the hierarchy. 
So I'm going to paste that in directly under the import call. 

So I'm going to swap out all this code with Georgia, Times New Roman, Times, Serif. When I save the style-sheet now, and 
reload the web page in my browser, you will see that all the fonts on the entire page have been changed to Georgia because 
that's now the main font family. Now it's important to note that this doesn't necessarily work the exact same way on all themes. 

Many themes have very specific fonts assigned to different elements, and you may find that there's several different places 
where the font is defined.

In which case, you have to go in and find all the places where the font is defined in the original style-sheet and then 
overwrite it piece by piece, but in a well-written theme the font is defined once at the very top and you can simply overwrite it the 
way we did just know, by just typing in a new font family. 

Choosing the right font family for your site is important, and no matter what people say, there is no such thing as a right or wrong font.
The font that fits with your message and communicates it well is the right font for your website. 






=====================================================================================================
=====================================================================================================
3. Modifying and Adding Templates
=====================================================================================================
=====================================================================================================31m 47s
Understanding the WordPress template hierarchy
3m 12s
Before we dive deeper into the world of WordPress themes, it's important that you have an understanding of how WordPress 
operates and how the different pages of your website are created. WordPress is a web application that interacts with a 
database. That means the constant you enter when you create a new post or a new page doesn't live in the website itself. 
The content lives in a database and it's only displayed using 

At any one time, when there's a person asking for SPECIFIC CONTENT from the database, by clicking a link inside your site, 
the DATABASE AND THE BROWSER INTERACT TO FIGURE OUT WHAT TYPE OF CONTENT THIS is and then use the appropriate template 
file to display that content. 


templates *********

when the visitor asks for that content. 

********A theme is a collection of templates WordPress uses to display the database content. *********

For instance, if you were to look at an 
index page, like the front of a blog, 
you would usually see a header created by the header.php template, 
you would see the content created by index.php, 
you would see a sidebar created by sidebar.php 
and the footer created by footer.php. 

But if you were to look at a single page, 
we would still see the same header, 
the same sidebar and the 
same footer 
but the content would be created by a single.php instead. 

So how do you know which of these template files kick-in at what point? That's where the WordPress template hierarchy comes in.

eg
Let's say you're accessing an archive page, 
         the category archive, you go in here, it says what is the page, it's an Archive Page and it's Category Archive.
		 
		 Okay, in that case, we're going to use the category.php template, right here, 
		            or if we are more specific about our call, 
					we can also use the category ID template 
					or even the category slug template. 
					If none of these files exit, we fall back to archive.php and then everything gets displayed. 
					
The same goes if you're looking at a single post. 
You ask, what kind of page is it? 
		It's a Singular Page, it's a Single Post Page and this is a Blog Post which means we'll use single post.php, 
		and if single post.php doesn't exist, we're going to use single.php instead 
		and if none of these template files exit, we fall back to index.php.
		


So when you're editing template files in WordPress themes, what you have to think about is what type of content this is 
and then edit the appropriate template file for that type of content. This may seem confusing at first but once just 
start working with it you will quickly see that there's a very clear system here and that by knowing what template file 
to edit you'll be able to control every aspect of what comes out the other end when people access your WordPress site.





Modifying existing templates
2m 33s
When you modify or add to an existing template file in a child theme, you replace the original template file.

eg. Change the single.php template so need to copy it to my child theme
copy from C:\xampp\htdocs\wordpress\wp-content\themes\twentytwelve\single.php




Moving the header image
4m 29s
eg  Appearance : Header : upload header
now we wnat to move it's location. We just cut and paste it above the site name and description. BUT I now need to make more space 
after the image.
NOTE class="header-image"
so we need a css entry for this class.
create a style called
.header-image {
	margin-bottom: 24px;    <--note any spaces after 24 means it does not work
}

Now let's get rid of the site title and tag line in appearance uncheck that.
I added text the a header image so that my site name is showing without the site title and tag line showing.







Adding Related Posts feature to posts
6m 26s
Here we add "Yet Another Related Posts Plugin" YARPP and a function 
https://wordpress.org/plugins/yet-another-related-posts-plugin/

adds a list of related posts. It reads your posts and suggests related ones. 
check settings  then SAVE now see where it shows up in my posts.
NOW uncheck Automatically display related content from YARPP Basic on:...then see MORE question mark and can use relates_posts() function to have it show up in a different place

now open my single.php and make the changes.  
find nav-single and remove it
<nav class="nav-single">
					<h3 class="assistive-text"><?php _e( 'Post navigation', 'twentytwelve' ); ?></h3>
					<span class="nav-previous"><?php previous_post_link( '%link', '<span class="meta-nav">' . _x( '&larr;', 'Previous post link', 'twentytwelve' ) . '</span> %title' ); ?></span>
					<span class="nav-next"><?php next_post_link( '%link', '%title <span class="meta-nav">' . _x( '&rarr;', 'Next post link', 'twentytwelve' ) . '</span>' ); ?></span>
				</nav><!-- .nav-single -->
insert
<?php
related_posts();
?>

What if we deactivate the plugin????
Therefore need to do this 
   if (function_exists()
   
And that if something disastrous happens when you install the new function, all you have to do is remove the template file 
from your child theme and everything goes back to normal again.

If you use plugins in your site, I guarantee you'll come across ones that require you to add functions or other elements 
to your template files. Using a child theme and wrapping these plugin functions and conditional function_exists tags 
ensures that you get the full use out of your plugin, that if the plugin breaks or gets deactivated, or uninstalled, 
it doesn't break your site.



Creating custom page templates
5m 43s
POSTS vs PAGES types of content 

2012 has different types of pages 
Default Template
Front Page Template 
Full-width Page Template with No Sidebar.

see page attributes for templates to choose which one. Each of the above ones can had settings changed on them for what displays. 

CREATE OWN PAGE TEMPLATES
You can create your own page templates to produce specific results on specific pages. I use this 
technique quite often, because not all pages should be displayed the same way.

look under theme/page-templates   see front-page.php and full-width.php 

now for standard template copy  C:\xampp\htdocs\wordpress\wp-content\themes\twentytwelve\page.php and rename it 
no-title-page.php 

tell Wordpress this is a custom template by changing the comment.
/*
Template Name: No title page template
 */
NOW Wordpress will show that as an option for pages. Holy cow what black box magic!



Now see the following 
<?php get_template_part( 'content', 'page' ); ?>   this is a reference to content-page.php 
so I can replace this with the lines in that file and edit it.
NOW delete this
<header class="entry-header">
								<?php if ( ! is_page_template( 'page-templates/front-page.php' ) ) : ?>
								<?php the_post_thumbnail(); ?>
								<?php endif; ?>
								<h1 class="entry-title"><?php the_title(); ?></h1>
							</header>

The custom page template is an often overlooked tool in the WordPress theme arsenal that allows you to create 
customized experiences for your visitors in a very simple way. The best way to get the most out of a custom 
page template is to simply start experimenting. And remember, there are no limits here. If the information 
exists, you can display it.





Using conditional statements for customized effects
5m 41s
Now I am going to show you a much cleaner and just as quick way of doing the same thing. as done in the last movie.

Rather than copying and pasting the code, I am going to use one of the many conditional tags built into WordPress, 
to test to see if were using a custom page template and then display the content accordingly.

if then statements.

set my custom page back to what it was before.
<?php get_template_part( 'content', 'page' ); ?>
and use 
codex.wordpress.org/Conditional_Tags   for displaying things

eg Conditional tags are small functions built into WordPress that allow us to test for different scenarios, 
and then do things based on those tests. Basically you are saying things like if this is the homepage then 
do the following, if it's not, do something else.

SOOOO copy content-page.php to child theme and edit it. 
wrap it in 

<?php 
		if ( ! is_page_template('no-title-page.php') ) { ?>
		<header class="entry-header">
			<?php if ( ! is_page_template( 'page-templates/front-page.php' ) ) : ?>
			<?php the_post_thumbnail(); ?>
			<?php endif; ?>
			<h1 class="entry-title"><?php the_title(); ?></h1>
		</header>
<?php } ?>

Using conditional tags, or even regular conditional if then statements in your child theme, you can turn on and 
off elements and functions at will to create highly customized behavior. I use conditional statements constantly 
in my sites, because they make the themes lean and clean, and make it easier to manage the template files. 

The rule of thumb here is this, if you want to show or hide something on a page or post and you're planning 
on making a new template, see if you can get the computer to test for a condition instead so you don't have 
to write out the entire new template.



Creating custom header, footer, and sidebar templates
3m 43s
The "custom front page template" has separate wigitized areas, or sidebars, than the regular page templates. 
 the widgets area  see it in the back end. 
 Main Sidebar, which is what appears on posts and regular pages, 
 and then you have this 
 First Front Page Widget Area 
 and 
 Second Front Page Widget Area, 
 
 These appear in the bottom of the "custom front page template"
 see the files: sidebar.php and sidebar-front.php
 
 Seeing the two files you can see 'sidebar-1' 'sidebar-2' 'sidebar-3'
 where do they come from???? see page.php and call to get_sidebar();  just like get_footer and get_header
 
NOTE: in front-page.php the call is this   get_sidebar('front')   which calls sidebar-front.php

PATTERN.
normal 
<?php get_header(); ?>
<?php get_sidebar(); ?>
<?php get_footer(); ?>

to call header-custom.php    --> <?php get_header('custom'); ?>


eg REGULAR

header.php 

page.php calls
    get_header();                       sidebar.php 
	get_footer();
	get_sidebar();

footer.php

CUSTOM eg no-title-page.php

header-custom.php 

no-title-page.php calls
    get_header('custom');                                             sidebar.php 
	get_footer();   can do the same for sidebar and footer too
	get_sidebar();

footer.php


====
====
This allows you to add and subtract content in areas like the header, sidebar, footer, depending on what page, 
post, or index the visitor lands on, and that can in turn be used to give the visitor a more meaningful and 
informational experience when visiting your site.


 
=====================================================================================================
=====================================================================================================
4. Customizing the Index Pages
=====================================================================================================
=====================================================================================================
17m 5s
Understanding the different index pages and what they do
4m 6s
One of the key components of any WordPress site is the index pages. Simply put, an index page shows a list of 
posts from the site depending on what you're asking for. The most well-known of the index pages is the blog page, 
which displays all the posts of the site in reverse chorological order. Other index pages include category index 
and archive indexes. The index pages in a WordPress theme or child theme live in a hierarchy and kick in at different 
times. Understanding which index page template handles and displays what content will help you customize the look 
and feel of your site and also avoid a lot of frustration when things don't display the way you intended.

What happens when you display any page in WordPress is the database and the browser cooperate to 
figure out what template to use.

eg looking at a Category page 
Wordpress says what kind of page is this????
it is an Archive Page : Catergory Archive :  do we have a file called    category-slug.php??? 
														then do we have category-Number.php
														yes/no then do we have category.php then use it.
											       
Sooooo we have the following Archivefiles
archive.php 
author.php 
category.php 
tag.php


eg
index.php   see codex.wordpress.org/Template_Hierarchy
also see 
<?php while ( have_posts() ) : the_post(); ?>
				<?php get_template_part( 'content', get_post_format() ); ?>
			<?php endwhile; ?>
			
this means get for each post 
content.php 
BUT also have content files for each of the main post formats, aside, image, link, and so on.
contant-aside.php 
content-image.php 
...
...etc

We even have one for page. If we look at content, you'll see that all that happens here inside the loop is we display the 
content for each post. We get the post thumbnail, we get the title, we get the comments link, and we get either an excerpt 
or the contents, depending on what type of archive this is. So as you can see, just like with the page templates, the 
index page templates work in collaboration with the content templates to display all the content.

So as you can see, just like with the page templates, the index page templates work in collaboration with the content 
templates to display all the content.

Understanding how the index pages work will help you come up with, and implement, new and exciting ways to display 
content. More importantly though, it'll help you troubleshoot potential problems when something doesn't display 
the way you intended, because now that you know how the template structure works, you can track down the correct 
template and make changes to that template when things aren't displaying correctly.




Adding author, date, and time information to the index loop
7m 15s
Once you start personalizing your child theme, you'll probably want to make changes to the index pages, as well as 
a single posts and pages. Working with the index templates require a bit more thinking on your end, but it's not 
any more complicated, and you can produce some pretty cool results with very little effort. 

He wants to move the Author etc to the top of the post vs the bottom 
See index.php 
which calls content.php so copy this to child theme 

THen move <footer class="entry-meta">
			<?php twentytwelve_entry_meta(); ?> up to before    <div class="comments-link">
BUT it has more than I want sooooo. find twentytwelve_entry_meta()   in functions.php
and copy $date and $author, then echo 'Published on: ' . $date . 'By: ' . $author


So all we have to do is copy out the entire section here from footer to end footer and paste it into content.php and 
you'll get the same results that I got. Here you've seen several different things: how the content.php template file 
interacts with multiple different other template files and uses functions from those files to display content; you've 
also seen how we can use existing code as building blocks to create new effects; and you've gotten a sneak peek at the 
functions.php file that we'll look at in more detail later.

But I want you to take away from this is any content you can see on the page you can always grab and put somewhere else 
in your template simply by copying wherever it comes from and placing it somewhere else.





Changing the appearance of category index pages
5m 44s
WordPress has multiple different index templates that kick in when different indexes are called, the most notable-- 
and the ones you should see in pretty much every WordPress theme--are index.php, category.php, tag.php, and archive.php. 
The names are self-explanatory. Sometimes you want different index pages to appear differently in your sites. I often find 
that while on the main index page it makes sense to have longer versions of the posts, with images and full text, on category 
and archive index pages it makes more sense to have shorter versions and maybe no images.

This can be accommodated by calling for an excerpt instead of the content of a post when the category or archive templates 
are used. If you look at the site the way it is now, you can see that on the front page, or the main index page, we have 
the full post, web images, and if there's a featured image, the featured image appears at the top. If we go to the category 
archive page, we'll see the exact same thing. Here we have the full post with images, and if there is a featured image, it's 
featured at the top. 

******
What I want to do is make the content of a post into just an excerpt, and I also take want to take away the featured image.

Now look at category.php 
see this.... 
while ( have_posts() ) : the_post();

				/* Include the post format-specific template for the content. If you want to
				 * this in a child theme then include a file called called content-___.php
				 * (where ___ is the post format) and that will be used instead.
				 */
				get_template_part( 'content', get_post_format() );

endwhile;

we want to change content.php so have less info for category.php 
so change inside content.php 


we see if (is_search()) then only show experpt
otherwise call the_content()
we can add more conditions  see codex.wordpress.org/Conditional_Tags#Any_Archive_Page
There are conditional tags available that can test for all the things that we want to test for.
is_category()
is_archive() 
is_tag()
etc etc use OR || 


so now we have 
<?php if ( is_search() || is_category() || is_archive()  || is_tag() ) : // Only display Excerpts for Search ?>
		<div class="entry-summary">
			<?php the_excerpt(); ?>
		</div><!-- .entry-summary -->










=====================================================================================================
=====================================================================================================
5. Modifying and Adding Functions
=====================================================================================================
=====================================================================================================
43m 5s
Introducing functions.php
3m 24s
At the core of all WordPress themes lies a file named functions.php. As the name suggests, the functions.php file 
contains core functions that make the theme work. These functions range from simple bits of code that activate code 
WordPress functionality to advanced functions you can modify to add new functionality and new features to the theme 
and to the site. Understanding the role and function of functions.php will enable you to go from simply messing with 
the template files in CSS to adding whole new levels of awesomeness to your site.

The good theme about the twentytwelve theme and the other core themes from WordPress is that they come heavily documented, 
meaning there's lots of explanations inside the files that explain what these files do.

eg line 61 of functions.php in 2012 
you'll see here we have a simple function called add_theme_support. This function adds different types of theme support, 
for example post-formats. So here you can see post-formats are activated and then there is a list of what types of 
post formats are activated, because there are several different types of formats you can activate if you want to 
and twentytwelve uses five of these post formats.
eg
// This theme supports a variety of post formats.
	add_theme_support( 'post-formats', array( 'aside', 'image', 'link', 'quote', 'status' ) );
	
	
Where are the widgits areas???
function twentytwelve_widgets_init() {
register_sidebar( array(
		'name' => __( 'Main Sidebar', 'twentytwelve' ),
		....
	) );

	register_sidebar( array(
		'name' => __( 'First Front Page Widget Area', 'twentytwelve' ),
		.....
	) );

	register_sidebar( array(
		'name' => __( 'Second Front Page Widget Area', 'twentytwelve' ),
		.....
	) );

	line 258, you'll see where the comments come from. This is actually after the template that creates the comments 
	section on your site. So when you want to work with comments you need to work with the code inside function.php 
	and also inside comments.php. What I have shown you here is just a small selection of what's in functions.php, 
	and we're now going to work with function.php to augment what's in there already and also add new stuff to the file.
	
	functions.php holds a lot of behavioral elements of a WordPress theme, and understanding how it works and how to interact 
	with it will allow you to make truly advanced themes that work the way you want them to. Fortunately, the 2012 developers 
	have left excellent documentation right in functions.php file, so it's easy for you to figure out what's going on.
	
	
	
	
	

Overriding existing functions
3m 23s
overrider or overrule???? 

Most well-written themes wrap functions in conditional statements so that they can easily be overwritten by child themes.

eg 
// Set up the content width value based on the theme's design and stylesheet.
if ( ! isset( $content_width ) )
	$content_width = 625;
Here we can set this in the child theme to another value to override this. 
Unlike with a style sheet where the parent theme style sheet is called first and then the child theme style sheet is called, 
when it comes to functions.php, the child theme functions.php file is called first and then the parent theme functions.php is 
called afterwards. Meaning, if you have set content_width in your child theme, this condition says it's already set; therefore, 
we're not going to set it in the parent theme.

eg  note here if the child theme has created this already then do not create it here.
if ( ! function_exists( 'twentytwelve_content_nav' ) ) :
/**
 * Displays navigation to next/previous pages when applicable.
 *
 * @since Twenty Twelve 1.0
 */
function twentytwelve_content_nav( $html_id ) {
	global $wp_query;

	if ( $wp_query->max_num_pages > 1 ) : ?>
		<nav id="<?php echo esc_attr( $html_id ); ?>" class="navigation" role="navigation">
			<h3 class="assistive-text"><?php _e( 'Post navigation', 'twentytwelve' ); ?></h3>
			<div class="nav-previous"><?php next_posts_link( __( '<span class="meta-nav">&larr;</span> Older posts', 'twentytwelve' ) ); ?></div>
			<div class="nav-next"><?php previous_posts_link( __( 'Newer posts <span class="meta-nav">&rarr;</span>', 'twentytwelve' ) ); ?></div>
		</nav><!-- .navigation -->
	<?php endif;
}
endif;


eg 
		add_filter( 'wp_title', 'twentytwelve_wp_title', 10, 2 ); 
This is a filter. It says add_filter, wp_title. A filter is different from a function, in that when you have a filter you can pass 
information to that filter and change the behavior of the function. So this filter interacts with the function above it, twentytwelve_wp_title. 
 And what you can do in your child theme is add information with a filter 
that then gets passed into this function and you can change to function through that filter. So it's a more advanced option when you want 
to change maybe a word or a link or something like that in that function without having to rebuild the function in the process.







Adding pagination to index pages
5m 49s

eg of changing a function.....
Let's look at an example of how you can override an existing function found in twentytwelve and replace it with a whole new function 
in your child theme. Though they're standard in WordPress themes, I don't particularly like the Older posts and the Newer posts links 
at the bottom of index pages. You can see it down here at the bottom. It says Older posts. When you click on it you go to page two and 
then you get either Older posts or Newer posts. I much prefer proper pagination lists where I can see how many total pages there are, 
and I can navigate in a more advanced way.

Now I want to replace the existing function that creates this Older posts and Newer posts link with a proper navigation menu instead. 
twentytwelve comes with a function called 
			twentytwelve_content_nav

1) create functions.php in child theme
2) copy function and modify it 
function twentytwelve_content_nav( ) {}   
3) Now if I reload my web page the navigation will not be there since this function is empty
4) search  on internet for open source function to do what I want. 

For pagination I found this great article called How to build a WordPress Post Pagination without plugin at kriesi.at
goo.gl/njhZ
This is a solution I've used many times, though I've augmented it quite a bit, and this is the solution we're going to 
use in the theme now.
 If you read this article, you'll see the explanation of how the function works with code examples and also how the style works, 
 and you can see how this all fits together so you get this nice navigation menu. 
 What I have done for this course is I've supplied you with an alternate version of this code specifically for the twentytwelve 
 child theme that you can copy out of the code snippets file and paste into your functions.php file.
 
 So we'll go to the codesnippets file, scroll down to this chapter number, 5.3,
 Save it and reload page to see what happens.
 
 
 He set up Reading to show only one post per index. The index at the bottom looks ugly soooo....
he said.... this doesn't look very good; I need some style to augment it so that it looks nice on my site. So I'll go back to my code 
snippets, scroll down, and here you'll find pagination styles that I've created specifically for this theme so that it works. 
We can copy that out, go up to the style sheet in child of twentytwelve, open the style sheet in your child theme, and then 
paste in the new styles. I'll paste them in here at the bottom. We see there's quite a few styles here that will style the 
different elements. Save that, reload your page again, and now you have a nice pagination bar here at the bottom that works 
exactly the way you would expect pagination to work.

NOTE: this did not work in my website

MORAL TO THE STORY:
Because the twentytwelve_content_nav function was properly wrapped in a conditional statement, we have an easy time overriding 
it and adding in new functionality. As a result, we've now added a great new functional pagination system to all our index pages 
with minimal effort.






Adding to existing functions
3m 21s
Sometimes overwriting an existing function is not what you want to do. You'll will often find that a function has a lot of elements 
you already want and all you want to do is add some more to it. In those cases, you can use your child theme functions.php file 
to add the extra functionality to the existing function.

eg
There are some great examples of how you can add on to existing functions in twentytwelve and many of these examples you'll find in 
most WordPress themes. If you go to the functions.php file for twentytwelve and you go to line 64, you'll find register_nav_menu.
see this:
 * @uses register_nav_menu() To add support for navigation menus. comment 
 
 line 64 
 // This theme uses wp_nav_menu() in one location.
	register_nav_menu( 'primary', __( 'Primary Menu', 'twentytwelve' ) ); 

	This is where you register the main menu inside your WordPress site. If you look at the site, you see there is a nav menu right 
	here at the top and if I go into the Dashboard > Menus, you'll see that menu is listed right here
	

In your child theme you can now add additional menus, simply by duplicating this line in your child theme and wrapping 
it in a function so that it gets called.
That way you can add several different menus to your site by simply adding onto the existing function. 

The same goes for the sidebar. If you go to line 195, you find this function, twentytwelve_widgets_init, and this function creates a 
sidebar. So here you see there're three sidebars being called. 
function twentytwelve_widgets_init() {
	register_sidebar( array(
		'name' => __( 'Main Sidebar', 'twentytwelve' ),
		...
	) );

	register_sidebar( array(
		'name' => __( 'First Front Page Widget Area', 'twentytwelve' ),
		'id' => 'sidebar-2',
		...
	) );

	register_sidebar( array(
		'name' => __( 'Second Front Page Widget Area', 'twentytwelve' ),
		'id' => 'sidebar-3',
		...
	) );
}
 In your child theme you're allowed to make your own widget init function, and in that function you can register more 
 sidebars. These sidebars will then be appended to the existing ones so now you can have more sidebars then you had previously.
 
What's important to note about these functions, both register_nav menu and register_sidebar, is that they're wrapped in 
additional functions. You'll see here register_sidebar is wrapped in this existing function, twentytwelve_widgets_init, 
and if go up to register_nav menu on line 64, you'll see that register_nav menu is actually contained within 
a function called twentytwelve_setup. 
In your child theme you can create a new function and run that function, and within that function you would then puts 
register_nav menu or register_sidebar or other things.

The other cool thing about this is there's no limit to how many you can add. You can have 100 menus or 200 sidebar areas if you 
wanted to, although that would be hard to manage. 

Remember how I said that functions.php from your child theme gets called before functions.php from your parent theme. 
That means you can't create a new function called twentytwelve_setup. If you do that, it'll crash everything, because 
there's no conditional statement here.

If you want to make a new function, you need to call something else, like my theme_setup and then you can call a 
new menu inside it. You also not create a new menu called primary menu, because there is already one created 
with that name. And you have to remember that your menu calls first. So if you create a new menu called Primary, 
that's the one that will kick in, and it'll ignore the one that's in here. Building child themes is all about 
doing more with less. Adding to a function instead of overriding it or overwriting it is a simple way of adding 
functionality with minimal effort.



Adding a new footer menu to Twenty Twelve
6m 24s
Pretty much all WordPress themes come with a main menu in the header, and most of these themes have the main menu 
wired to the WordPress menu system for easy configuration. I'd like to add an extra menu in the footer as well so 
that if a person has reached to bottom of the site, they can navigate to all my important pages without having to 
scroll back to the top of the page. Using a child theme, adding the menu like this, is very easy. 

To add a new menu we have to do three things. 
1)We have to add the menu to the existing menu function using function.php, 
2)we than have to add the menu to the template files, 
3)and then we have to style the menu to make it look nice.

1) copy
// This theme uses wp_nav_menu() in one location.
	register_nav_menu( 'primary', __( 'Primary Menu', 'twentytwelve' ) ); 
to child function.php

like this:
function mychildtheme_setup() {
// This theme uses wp_nav_menu() in one location.
	register_nav_menu( 'secondary', __( 'Footer Menu', 'twentytwelve' ) );
}
BUT we need an action to make mychildtheme_setup run 
add_action( 'after_setup_theme', 'mychildtheme_setup' );

Now in the backend I can see this Menu under Manage Locations  (differs from the tutorial since it is now 2015)

The menu needs to be put in the theme if it will show up. I want it in the footer so get the footer.php and put in childtheme .
edit it and put in
<nav id="footer_menu">
		<?php wp_nav_menu( array( 'theme location' => 	'secondary'));  ?>
</nav>
save and see it there but does not look pretty....

soooo chooose the styling for the header.php file so copy it and clean it up like this.
<nav id="footer-navigation" class="main-navigation" role="navigation">
			<?php wp_nav_menu( array( 'theme_location' => 'secondary', 'menu_class' => 'nav-menu' ) ); ?>
</nav><!-- #footer-navigation -->
And the look and feel is like the header menu

When I scroll down to the bottom, we now have a nice-looking menu at the footer that's different from the top. So now you can go 
back to Menus and you can create two different menus--one for the header and one for the footer-- and assign them to each of them. 
By adding a menu to the existing menu functions, we preserved the original menu rather than overwrite it. This way you can add as 
many menus as you want and create custom navigation for your visitors to find what they're looking for. CAN CUSTOMIZE IT TO BE DIFF.




	

Adding a new widgetized area to pages
4m 9s
Earlier in this course I talked briefly about widgetized areas and sidebars. Now we're going to take a look at how you can add new 
widgetized areas to your site.
To add a whole new widgetized area we first have to add to the existing function that creates widgetized 
areas and then we have to add that area to a new sidebar file, or somewhere else. In our functions.php file 
you find the function that registers the sidebars at line 195.
function twentytwelve_widgets_init() {
	register_sidebar( array(
		'name' => __( 'Main Sidebar', 'twentytwelve' ),
		'id' => 'sidebar-1',
		...
	) );

	register_sidebar( array(
		'name' => __( 'First Front Page Widget Area', 'twentytwelve' ),
		...
	) );

	register_sidebar( array(
		'name' => __( 'Second Front Page Widget Area', 'twentytwelve' ),
		...
	) );
}
add_action( 'widgets_init', 'twentytwelve_widgets_init' );

Add another one in my functions.php file 
register_sidebar( array(
		'name' => __( 'RickPage Sidebar', 'twentytwelve' ),
		'id' => 'sidebar-4',
		'description' => __( 'Appears only on pages', 'twentytwelve' ),
		'before_widget' => '<aside id="%1$s" class="widget %2$s">',
		'after_widget' => '</aside>',
		'before_title' => '<h3 class="widget-title">',
		'after_title' => '</h3>',
	) );
	
	Now on our website we can see this option under Widgets on the backend 
	We can put in things in there.
	We still need to put in the new sidebar in a custom template
	  copy sidebar.php(rename as sidebar-page.php) and page.php to my childtheme 
	  in sidebar-page.php refer to sidebar-4
	  
	  I now have to change my page template to call this new sidebar-page template.
	  and change <?php get_sidebar(); ?> to <?php get_sidebar('page'); ?>
	  
Though widgets are most commonly found in sidebars and footers, you can actually put a widgetized area 
anywhere you want. Now that you know how to do it, you can knock yourself out putting widgetized areas 
anywhere. Just remember that you have to link all these files together like you saw to make it all work.
	



Adding static content to the sidebar   (in this case facebook etc etc Icons)
7m 44s
Sidebars are most often used to provide links and further information about the site to your visitors. 
This is normally done through widgets, but in some cases you may want to add some permanent static 
content to the sidebar as well. There are many reasons for this, but one example is if you want to 
add social media links at the top of the sidebar permanently. As you can see, in my site right now 
I have some links to social media here. They're just regular text links and they're added in through 
a widget. So I can go into my Widgets and show you the actual links.

Do this by adding text widgets with standard html in them.
What I want to do is put this code into my sidebar.php template instead so it's there permanently, 
no matter what the widgets do, and I also want to restyle it so that it looks a bit nicer, with some 
icons instead of just text. The first thing I need to do is get the sidebar.php file over in my child 
theme, so I'll go and find sidebar.php and copy it over and then I can make changes to it.

copy sidebar.php to my childtheme
note there is stuff in the functions.php file for the widget that needs to be copied.

see that I put it in sidebar-page.php since that was done in the last lesson.

Now he addes icons he found on the web 
create sub folder called images and put them in there.

add to the stylesheet.each list item has a class to associate the image to the link
use code snipits 

I added the files to ChildTHemeof2012/images.  I had to find ones that were small enough
I added the code snipits to sidebar-page.php and styles.css 

Static content in a sidebar is usually reserved for things that shouldn't be changed, and this technique 
should be used sparingly. However, in the right circumstances adding static content--whether it be 
links, images, ads or something else--makes a lot of sense, and now you know how to do just that.





Replacing existing functions
2m 36s
From time to time you'll want to disable or replace existing functions altogether. This can be because 
you want to remove the function or because you want to replace it with something completely different. 
To get a clear picture of when this would happen, it's important to understand what types of functions 
you're likely to find in the functions.php file. In addition to the typical WordPress functions like 
the ones you have seen-- menus, sidebars, navigation, and so on-- the functions.php file also often 
carries with it calls to style sheets and JavaScript through what's known as enqueueing.

****> If you want to disable these, you need to dequeue them.
eg 
function twentytwelve_scripts_styles() {
	global $wp_styles;
....
....
add_action( 'wp_enqueue_scripts', 'twentytwelve_scripts_styles' );

eg 
wp_enqueue_script( 'comment-reply' );
wp_enqueue_script( 'twentytwelve-navigation', get_template_directory_uri() . '/js/navigation.js', array( 'jquery' ), '20140711', true );
wp_enqueue_style( 'twentytwelve-fonts', esc_url_raw( $font_url ), array(), null );

So what does it mean when it says that a script or a style is enqueued? Well, it means that WordPress is 
calling it into the theme without specifying it in the header.php file or footer.php file or anywhere else. 

That means this style (twentytwelve-fonts) and the other styles and the other JavaScript functions are being added through the 
functions.php file instead. And because they are added in through an enqueue function, we need use the 
dequeue function to take them out so that we can replace them. By dequeuing functions in your child 
theme, you're actively telling WordPress to ignore those functions after they've been called in the 
parent theme. It seems a bit convoluted and to be quite frank, it is quite convoluted, but it allows 
you to control functions without actually removing them from the parent theme altogether.




Adding a Google font through a function
6m 15s
Out of the box the twentytwelve theme uses a font from the Google Fonts library called Open Sans 
as its main font. Earlier in the course, I used CSS in my child theme to override that font so 
that we are instead using Georgia. But now I want to replace the Google Font Open Sans with a 
different Google Fonts using a function and enqueuing a style sheet. Before I do anything else, 
I need to get rid of the styles in the child theme style sheet that are causing the site to display 
using the Georgia font.

comment out this 
body.custom-font-enabled {
	font-family: Georgia, Times New Roman, Times, serif;
}
Now in functions.php parent copy the dequeue code sample in the comments 
NOTE: I cannot find this in the version as of May 2015 
THIS IS WHAT I FOUND
/**
 * Return the Google font stylesheet URL if available.
 *
 * The use of Open Sans by default is localized. For languages that use
 * characters not supported by the font, the font can be disabled.
 *
 * @since Twenty Twelve 1.2
 *
 * @return string Font stylesheet or empty string if disabled.
 */
function twentytwelve_get_font_url() {...
...
maybe we can do the opposite of this??? 
add_action( 'wp_enqueue_scripts', 'twentytwelve_scripts_styles' );

To make it all work there is an add_ action call, and the add_action call calls 
mytheme_dequeue_fonts 
down here and stacks it after the parent theme functions.php file has been run. That's why you have 11 at the end. So if I this, go back to my browser, and reload this page, you'll see that the font changes ever so slightly. That's because the font now fell back to the next option in the font family, which is either Helvetica or Arial or Sans Serif.

functions.php has this 
wp_enqueue_style( 'twentytwelve-fonts', esc_url_raw( $font_url ), array(), null );

add this to the local functions.php
function mytheme_dequeue_fonts () {
	wp_dequeue_style( 'twentytwelve-fonts');
}
add_action ( 'wp_enqueue_scripts', 'mytheme_dequeue_fonts', 11);  //11 says run this last 

Now let's find the font we want 
www.google.com/webfonts 
https://www.google.com/fonts

Select the font I want and then options and copy the code I need to used to put in my web site. 
click on quick use : check boxes : then select code

<link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
I can add this to my function.
function mytheme_dequeue_fonts () {
	wp_dequeue_style( 'twentytwelve-fonts'); /*dequeue this style*/
	wp_enqueue_style( 'montserrat', 'http://fonts.googleapis.com/css?family=Montserrat:400,700');
}
Now see if it is there even thought it is not showing up
ctrl shft i 
select resources 
my site : style : css  and will see the font

now copy the line of code from the googleFonts to the CSS file to activate it
but wrap it in body
body {
	font-family: 'Montserrat', sans-serif;
}


Sometimes you have to do a bit more work to get your child theme to do exactly what you want. 
This example shows you the process of disabling and replacing a function to get a different 
result. You can use the same technique to disable and/or replace JavaScripts and other styles, 
and even some other core functions like menus, comments, and widgetized areas in twentytwelve. B
asically, anything you find in the functions.php file of 2012 that's enqueued you can dequeue, 
and you can also enqueue any style and any JavaScript you want.








=====================================================================================================
=====================================================================================================
6. Working with Featured Images
=====================================================================================================
=====================================================================================================
10m 24s
Adding new featured image sizes
5m 41s
Featured images, or post thumbnails, is a great function built into WordPress that in my opinion is not used nearly 
enough. Using featured images you can do all sorts of cool stuff like creating featured content sliders, add image 
previews, and indexes, and even make post galleries. Featured images can also be configured to interact with social 
sharing sites like Facebook and Google+ so that you can control what image appears when someone shares your content, 
because featured images are so powerful it's important that you understand how to add the image sizes you want and 
how to use them.

If you look at the twentytwelve theme, you can see that there is a featured image at the top of each post. 
To assign a featured image you go into edit the post and you scroll down and on the right side you have the Featured 
Image option. By default, the featured image appears at the top of each post, and if you go into the index and if 
you go into the index and you find a post that has a featured image, the featured image appears in the index as well. 
But what if you want to use a different-sized featured image? In that case you have to tell WordPress what size you 
want and how you want WordPress to handle that image.

C:\xampp\htdocs\wordpress\wp-content\uploads  contains all images loaded to my site and have the various sized of the file.
150x150 etc 
these are set in Settings : Media : and defined sized for various things

When you are working with a theme and you want to include featured images in your theme you want to predefine the size of that 
image, and you want to make it so that no one can change it, because otherwise things might break. Adding new image sizes is done in the 
functions.php 
file, just like adding pretty much everything else is. To add a new image size I'm going to go to functions.php in my child theme, 
find this 
mychildtheme_setup function 
I already created, and here I am going to register a new image size.

add_image_size( 'category-thumb', 100, 100, true);


When I save this, what will happen is next time I upload an image to WordPress, WordPress will create an image that's 100 x 100. 
However, it doesn't automatically do that to the images that are already in the system. To make that happen I have to add a 
plugin that'll go through all the images and create the new size. So now I need to go to Plugins, add a new plugin, search for 
regenerate, and here you'll find a plugin called 
				Regenerate Thumbnails created by Viper007Bond.

Once the process is complete, we can go back to the Uploads folder, and you'll see that now each of the images has a 100 x 100 
version in addition to the ones that are already there.

That's because now we have regenerated a new image size for each of the individual images. I use featured images all the time 
in my themes, both for myself and for my clients. Now that you know how to add new sizes, I'm sure you're starting to get ideas 
about how to use this feature, and that's what we're going to do next.


Adding featured images to posts and pages
4m 43s
Once you have featured images in your site, you can add them pretty much anywhere you want on the site. Because the featured image 
is directly associated with each post and each page, without being in the content body, you can display these images in a different 
way from regular images in the body. The key is to know how to call them up, and how to get the correct size when you do. I have 
shown you this several times before. In the twentytwelve theme, the general way in which a featured image is displayed is at the 
top here: top of the post, large image before anything else. But earlier in the course we created new category templates and in 
these templates those gigantic featured images look pretty weird.

To do that, we need to make some small changes to the content.php template and add in the featured image. First, I'll open content.php 
in my child theme and find out where I want to put in this content. What I want to do is put it next to the excerpt, and since I already 
have the conditional call to test for when the excerpt should be displayed, I'll just place it inside that conditional call.

		<div class="entry-summary">
			<?php the_excerpt(); ?>
		</div><!-- .entry-summary -->
		<?php else : ?>
		
		Note if there is no image to display we want conditional 
		<?php 
			if ( has_post_thumbnail() )	:
				echo '<figure class="cat-thumb">';
					the_post_thumbnail('category-thumb');    //use 'category-thumb' which was defined in my functions.php
				echo '</figure>';
			endif;
		?>
		
But they don't look exactly right yet. I still have to float this to the left, and that's why I wrapped this figure class="cat-thumb" 
around it, so that I can now create a style for cat-thumb.
So I'll go to my style sheet, scroll down, add class cat-thumb, and then I'll say float: left;
.cat-thumb {
	float : left;
	margin : 0 10px 10px 0;
}






=====================================================================================================
=====================================================================================================
7. Beyond the Basics
=====================================================================================================
=====================================================================================================
31m 1s
Adding a welcome message to the front page
1m 22s
If you have been following this course from the very beginning, you should now have a pretty good idea of how you can use a 
child theme to change the styles of your site and also change functionality of your site. Now we are going to take what we 
have learned and change the overall site to make it easier for the visitors to understand and use. You may have noticed 
that when you use a WordPress theme you generally have one of two options on the front page: you either have the index, 
which shows the latest posts, or you have a front page template that shows some sort of welcome message, maybe a video, 
and some widgets or other stuff.

None of these are really good front page for people who are just starting out and just came to your site, because if you 
have the index, all you see is new content and if you have the static front page, you have a static front page with no new 
content. What I want to do is combine the two so you get a welcome message at the top, maybe with an image or a video, and 
then you get the index underneath. The reason why I want to do this is because I want to give the people who visit the site 
a great experience and that's one of the reasons why you want to build a website to begin with, to give people a great experience.

And using a child theme, we can now take everything we learned, put it together, and then make a new experience on the front 
page that works really well, both for you and for your visitors.




Displaying page content in an index page
7m 42s
When you open a page or a post or a index page in WordPress what you're really doing is asking the database to return specific 
cells from its tables to you, in a specific layout. This is what's called a database query. This means that if you know how to 
manipulate the database queries, you can ask the database to return any information you want and place it anywhere. That's what 
we're going to do now. In my site, I've created a new page. It's called Front Page. And in this page all I have is three paragraphs of text.

What I want to do now is get this text to appear on the Front Page itself, above the index. So when people visit my site 
they'll first see that welcome message and then they scroll down and see the index. 

To get this to work, we're simply going to call the front-page content and display it into index.php template. 

Here I'm going to teach you a trick. When I start adding this type of content into my site, say a content slider or a welcome 
message or anything else that requires quite a bit of code, what I do is I place it in a separate file and then I just 
call that file into the template.
That way I know exactly where that content is if I need to edit it later.

so create : welcome.php   save as php file

Now you notice I'm pretty meticulous about how I write my HTML, and you might also wonder where I get all these ID names and everything 
from. This is just a habit. I like to really document what I do and I write everything out and I give every single elements an ID or a 
class so that I can easily target it with CSS later if I want to.


Now if you've done any kind of work with WordPress before, you may notice that I'm using the entry- content class for this div here. 
That's because I want the content I'm displaying at the top to have the same styling as to content that's in a regular post. And as 
you know, entry-content is generally the class that's applied to any post content, so that's why you see it here. 

This is the key stuff in welcome.php:
<?php $page = get_page_by_title( 'Front page static' ); ?>
		
	<article id="intro-elements">
		<div class="entry-content">
		
			<!--<p>This is the text that is displayed by the welcome.php file.</p> -->
			<?php echo apply_filters('the_content', $page->post_content); ?>

		</div><!-- .entry-content   note this will apply this syle-->

To have this show up we need to copy index.php and copy to child theme
In index.php:
<?php get_template_part( 'welcome' ); ?>	
		

Now that I have my Front Page content displayed on the Front Page, I'm going to hide the Front Page button in my menu.
So I'll go to the backend, to menus, and apply a menu that doesn't have a Front Page. I've already created one here to 
the main menu. Save it, reload, and now we have a seamless experience. 

 It is outside the automatic template queries generated, the real magic of WordPress happens. Once you wrap your head around the 
 fact that you can call any content at any time from anywhere, you'll realize that can do pretty much anything you want, and the 
 only limitation is your own imagination.
 
 
		
		
Hooking in a featured image
4m 34s
In the previous movie, we added a welcome message to the top of our index page so that when people visit the site they immediately 
get a welcome message. And this welcome message is coming from a separate page within WordPress. Now I want to take that a step 
further and add a featured image to the welcome message and then display that featured image alongside the welcome message here 
on the right. But this is a bit of a challenge, because we're now outside the loop. The loop is what runs down here in the index page.

It shows all the different posts. But we created a special call that calls in content from a page to display above that. Now if 
I use the normal post thumbnail template tag to get a post thumbnail to appear, or a featured image to appear, what will happen 
is I'll see the featured image from the first post rather than a featured image from this page. What I need to do instead is 
tell the database to specifically grab the post thumbnail or featured image from this page and display it next to the overall 
content.

But I'm getting ahead of myself here. First I need to add a featured image to my page. So I'll go to the backend, go to Pages, Front Page, 
and add a featured image. So I'll add an image from my desktop, change the Title and Alternate Description, and set Use as featured image. 
Update the page and now the page has a featured image.

Now I need to call in that featured image in this new section that I have here on the top of my page. So I'll go to my child theme and 
open welcome.php, and from here I need to insert my featured image. But first I have to figure out how to call it. I want to use a function 
called get the post thumbnail. I want to use that function because with that function I'm allowed to provide an ID for a specific post or 
page and then say I want the featured image from this particular page. But where do I get that ID from? Well, if you remember, this page 
variable contains all the information from the database about our Front Page page.

So if I do this print_r thing again-- say I want to print everything from page, save it and refresh in my browser-- you'll see in here 
we have ID 114. This is the post ID for our page, so that's the number I want to use. That means I can call in that number in my new 
function. Because I want to insert a featured image and then not share that in all cases I will have a featured image, for example, 
if I pass this child theme onto someone else and they forget to apply a featured image to their Front Page post, they may not have 
a featured image.

I'm going to add in a conditional statement, if, and then I'll say get_the_post_thumbnail. And then I want to point to that particular 
ID, so I'll say page-> ID. Then we get the ID contained within the page that's from the Front Page. Do some clean up here, and then I 
need to end my conditional statement, endif. So now I'm saying if we have a post thumbnail attached to the page for this ID, so Front 
Page, put in the following



 I want to use that function because with that function I'm allowed to provide an ID for a specific post or page and then say 
 I want the featured image from this particular page. But where do I get that ID from? Well, if you remember, this page variable 
 contains all the information from the database about our Front Page page.
 welcome.php 
 to find the id for the image do this
 <?php print_r($page); ?>
 
 now I can see this on the web site [ID] => 139
 
 Because I want to insert a featured image and then not share that in all cases I will have a featured image, for example, if 
 I pass this child theme onto someone else and they forget to apply a featured image to their Front Page post, they may not 
 have a featured image. I'm going to add in a conditional statement, 
 SEE the changes in style.css and welcome.php
 
 




Making the welcome message responsive
6m 27s
Responsive to phones too.???
Wants the image to be to the right. He wants to apply some CSS and thinks 2012 will have that. So he will look in 2012 FrontPage template.
therefore Dashboard : Pages : Front Page --> change to FrontPageTemplate and see how it looks

NOTE: Rick did not see the image on the right. So what happened?
What matters here is that you can now see that the layout is the layout I want. I have image on the right and I have text on the left, 
which means the work has already been done, and all I need to do is make my Front Page, the welcome.php file, call in the same styles.

What we need is for it to say
<figure class="entry-page-image">  in welcome.php


You see here that as I resize the window, the content shifts around. But it looks really weird up here because currently 
everything is kind of jammed together. So I need to add some style to make sure that there is space here and everything 
is aligned properly. To save you some time, I have already created all the styles necessary and put them in the code snippets 
for this movie. So if you go up to your code snippets, under movie 7.4, you find all the styles necessary. So I'll start by 
copying this batch of styles here, go to my style.css file in my child theme, and just paste that in.

This I put in the style.css already.

If you want to know more about how to build responsive WordPress themes, you should go and check out my other course in 
the lynda.com library called WordPress: Building Responsive Themes.
see this:
/* Minimum width of 600 pixels. */
@media screen and (max-width: 600px) {
	
	#intro-elements {
		float: none;
		width: 100%;
	}
}




Restricting content to the first page of the blog
4m 22s
In many cases, you want to restrict certain content or behaviors to a particular page or post in your site. This is relatively 
easy when it comes to pages or posts, because you're dealing with single items. But what do you do from the page in question 
is an index page. We can't test for a specific post id, because the post keeps changing. Instead, we have test to see if the 
currently displayed template is the one we want and that it is in the order we want it to be in. Let me explain what I am 
talking about here.

We added a welcome message to our index template. It displays at the very top of the index template and then underneath you 
have the index content.

Logically, we only want the welcome message to appear on the front page, so Page number 1 of the index template. So how do we 
do that? Well, we have to ask WordPress several questions. We both have to ask it, is this the front page that you are already 
currently displaying.
And we also have to ask it, is this first of the index pages, so that if it's the 2nd or 3rd or 50th of the index pages, 
it doesn't display this welcome message. 

need to use:
is_front_page() tag 
is_paged()      tag too
So in index.php we need to wrap get template 'welcome' in a conditional statement

see blendinsider.com  <--not available now

Adding a jQuery function to show or hide the welcome message
6m 34s
When you add nonessential content like a welcome message to a page on your site, it's always a good idea to give people an 
easy way of hiding that content. This is the type of behavior that JavaScript is great for. 

JavaScript 
allows you to add 
the user interaction on top of existing content so that your user can interact with the content and change it even after 
the page is being loaded in the browser. Now though we've added welcome message and an image here at the top of the page 
and it looks the way we want it to, 

I want to add an extra feature.
A little button down here somewhere, you can click on the button and this content is hidden and then you click on the button 
again and it shows the content again. To make that work I am going to use some jQuery Scripts, but before I can add the script 
I need to add the button. In my child theme I'll open welcome.php, scroll all the way to the bottom, and here I'm simply going 
to add a regular button. I'll wrap it in a div with a class, call the class hide-button, and inside this div I'm going to put a 
regular link.

in welcome.php put 
<div class="hide-button">
	<a href="#" title="Hide the welcome message">Hide</a>
</div><!-- .hide-button -->

Now I need to add the jQuery script to make the hide and show function work. First, I'll go to my child theme folder, 
add a new folder call it JS.


Also add this to functions.php see code snipits and css file additions.

This hides and shows the Welcome content from welcome.php


 JavaScripts can make your site more interesting and easier to use for your visitors. Adding JavaScript correctly 
 through enqueuing allows creative flexibility and less clutter when you work with your theme. The key when using 
 JavaScripts is to subtle about it.

Adding too much fancy JS often leads to a clunky site that takes away from the content. What you have seen here in the 
few last movies is how we can add advanced features into our site in a very easy way and add extra functionality for 
our visitors. And that's kind of whole point of using a child theme, you make the experience better for your visitors.







=====================================================================================================
=====================================================================================================
8. Adding Finishing Touches
=====================================================================================================
=====================================================================================================
10m 23s
Adding a custom favicon
3m 58s
Adding a custom screenshot
2m 29s
Adding footer information
3m 56s





=====================================================================================================
=====================================================================================================
9. Troubleshooting Child Themes
=====================================================================================================
=====================================================================================================
7m 14s
What to do when a child theme crashes your website
4m 38s
Updating parent and child themes
2m 36s